Q:这个包是用来做什么的？
A:这是目前用于我们游戏服务端战斗模块的一个包，它的主要功能是对给定四则运算式求值。

Q:为什么要写这个包？
A:我们游戏里有很多技能，每种技能的效果（技能效果说白了就是对血量这样的数值进行修改）都不一样。
我们不可能让程序员去亲自写代码实现每种策划提出的技能，因此我们做技能的方式是在技能配置表里给
策划一定的自由度，通过填写不同的公式，来实现不同的技能效果。

所谓“公式”，说白了就是一种DSL（Domain Specific Language）。既然是语言，那么自然需要某种东西去解释/翻译它。
因为我们的这个DSL并不复杂，只是相当于四则运算算式，因此以前负责这个项目程序员想了个办法，就是写了个代码生成器，
把配置表里的那些算式拿出来放到Java代码里去，变成Java语言里的算式，让Java语言去解析这些算式。

但是这种方式在各方面都有其局限性，因此这个包就是用来代替以前的那种做法的。通过这个包，我们可以在运行时直接解析那些公式了。

Q:这个包的具体功能？
A:解释一门语言，该语言(记为LANG)目前的文法定义如下：

NUM(数字字面量) -> 可带小数的数字
BOOL(布尔字面量) -> "true" | "false"
VAR(变量标识符) -> [a-z] | [A-Z] | VARVAR
OP(运算符) -> + | - | * | / | ^ | C语言里的那些逻辑运算符和比较运算符
STMT -> NUM | BOOL  | VAR | FUNC | (STMT) | STMT OP STMT
STMTS -> ε | STMT | STMTS, STMTS
FUNC(函数调用) -> 函数名(STMTS)
LANG -> STMT

可以看出来，除了支持四则运算，还支持函数调用和变量引用。当然，现在只支持通过Built-in方式进行定义函数和变量。
*:Built-in函数的定义在OperatorDefinition.java

具体的字面量、运算符和函数语义定义如下：

数字字面量 - 如“1”、“2.8”这样的数字表示。也支持直接负号，如“-1”、"-3.14"
布尔字面量 - 包括"true"和"false"
隐式转换 - 浮点数隐式转为整数时，小数部分将被抹去。布尔类型不会隐式转换到其他类型，反之亦然
显式优先级 - 以圆括号包裹表达式以声明更高的优先级
四则运算符 - 包括+、-、*、/、%，语义与Java语言相同
逻辑运算符 - 包括&&、||、!，语义与Java语言相同
比较运算符 - 包括==、!=、>、<、>=、<=，语义与Java语言相同
指数运算 - 通过函数来计算指数:pow(base, exponent)、通过运算符来计算指数:base^exponent、自然对数:log(value)
绝对值 - 获得一个数的绝对值:abs(value)
比较 - 接受两个参数，返回更大的那个:max(value1, value2)、接受两个参数，返回更小的那个:min(value1, value2)
取整 - 以四舍五入的规则获得一个整数:round(value)、获得小于等于参数的最大整数:floor(value)
随机 - 获得一个伪随机浮点数，范围是[0,1):random()
条件运算 - if(cond,expr1,expr2)，如果cond不为0，则返回expr1的值，否则返回expr2的值。注意，if是一个函数
条件运算 - cond?expr1:expr2，如果cond不为0，则返回expr1的值，否则返回expr2的值

注意...指数符号的结合性
-指数符号^在iPhoneSpotlight中为左结合性，而在WolframAlpha则为右结合性...它的结合性并没有一个明确定义或业界共识。
在本解释器中，连续的^符号将被视为迭代幂次运算，为右结合性(与WolframAlpha相同)
通俗地说，若有以下一式：2^3^4^5，其运算顺序将为2^(3^(4^5))而非((2^3)^4)^5
书写表达式时请尽量使用pow函数，这可以使求值顺序更清晰
